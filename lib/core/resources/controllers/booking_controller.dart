import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart';
import 'package:silid/core/resources/models/bookings.dart';
import 'package:silid/core/views/student/index.dart';

class BookingController extends GetxController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  var bookings = <Bookings>[].obs;
  final RxBool isLoading = false.obs;

  Future<void> createBooking({
    required String student,
    required String teacher,
    required DateTime date,
    required String lesson,
    required String meetingLink,
  }) async {
    try {
      isLoading.value = true;

      // Get Firestore autogenerated document ID
      DocumentReference bookingRef = _firestore.collection('bookings').doc();
      String bookingId = bookingRef.id; // Firestore-generated UID

      // Create a booking instance
      Bookings newBooking = Bookings(
        uid: bookingId,
        student: student,
        teacher: teacher,
        date: date,
        status: {'message': 'Booked', 'remarks': ''}, // Default status
        lesson: lesson,
        meetingLink: meetingLink,
      );

      // Save to Firestore with autogenerated UID
      await bookingRef.set(newBooking.toFirestore());

      isLoading.value = false;
      Get.snackbar("Success", "Booking created successfully!");
      Get.off(() => const StudentIndex());
    } catch (e) {
      isLoading.value = false;
      Get.snackbar("Error", "Failed to create booking: $e");
    }
  }

  Future<void> fetchBookings({String? studentName, String? teacherName}) async {
    try {
      isLoading.value = true;

      Query query = _firestore.collection('bookings');

      // Apply filter based on the provided parameter
      if (studentName != null) {
        query = query.where('student', isEqualTo: studentName);
      } else if (teacherName != null) {
        query = query.where('teacher', isEqualTo: teacherName);
      }

      QuerySnapshot bookingSnapshot = await query.get();

      bookings.value = bookingSnapshot.docs
          .map((doc) => Bookings.fromFirestore(doc))
          .toList();

      isLoading.value = false;

      update(); // ðŸš€ Force UI update after fetching data
    } catch (e) {
      isLoading.value = false;
      Get.snackbar("Error", "Failed to fetch bookings: $e");
    }
  }
}
